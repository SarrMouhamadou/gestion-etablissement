name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Récupérer le code source
    - name: Checkout code
      uses: actions/checkout@v3

    # Configurer Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    # Installer les dépendances
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Build des images Docker pour chaque microservice
    - name: Build Docker images
      run: |
        docker build -t gestion-etablissement-etudiants:latest -f service-etudiants/Dockerfile service-etudiants
        docker build -t gestion-etablissement-classes:latest -f service-classes/Dockerfile service-classes
        docker build -t gestion-etablissement-profs:latest -f service-profs/Dockerfile service-profs
        docker build -t gestion-etablissement-cours:latest -f service-cours/Dockerfile service-cours
        docker build -t gestion-etablissement-emploi-du-temps:latest -f service-emploi-du-temps/Dockerfile service-emploi-du-temps
        docker build -t gestion-etablissement-web:latest -f service-web/Dockerfile service-web

    # Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Push Docker images to Docker Hub
    - name: Push Docker images to Docker Hub
      run: |
        docker tag gestion-etablissement-etudiants:latest ${{ secrets.DOCKER_USERNAME }}/gestion-etablissement-etudiants:latest
        docker tag gestion-etablissement-classes:latest ${{ secrets.DOCKER_USERNAME }}/gestion-etablissement-classes:latest
        docker tag gestion-etablissement-profs:latest ${{ secrets.DOCKER_USERNAME }}/gestion-etablissement-profs:latest
        docker tag gestion-etablissement-cours:latest ${{ secrets.DOCKER_USERNAME }}/gestion-etablissement-cours:latest
        docker tag gestion-etablissement-emploi-du-temps:latest ${{ secrets.DOCKER_USERNAME }}/gestion-etablissement-emploi-du-temps:latest  # Corrigé ici
        docker tag gestion-etablissement-web:latest ${{ secrets.DOCKER_USERNAME }}/gestion-etablissement-web:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/gestion-etablissement-etudiants:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/gestion-etablissement-classes:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/gestion-etablissement-profs:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/gestion-etablissement-cours:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/gestion-etablissement-emploi-du-temps:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/gestion-etablissement-web:latest

    # Déploiement en Dev (Docker local ou serveur avec Docker)
    - name: Deploy to Dev
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "Déploiement en Dev sur une instance Docker..."
        # Ajouter ici les commandes SSH ou Docker pour déployer (exemple : docker-compose up -d sur un serveur Dev)

    # Déploiement en Staging (Kubernetes)
    - name: Deploy to Staging
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Déploiement en Staging sur Kubernetes..."
        # Ajouter ici les commandes kubectl pour appliquer les manifests Kubernetes

    # Déploiement en Prod (serveur cloud)
    - name: Deploy to Prod
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "Déploiement en Prod sur un serveur cloud..."
        # Ajouter ici les commandes pour déployer sur ton cloud (AWS, GCP, etc.)